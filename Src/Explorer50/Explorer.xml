<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Explorer</name>
    </assembly>
    <members>
        <member name="M:ExplorerCtrl.Controls.AnimationImage.StartAnimation">
            <summary>
            Starts the animation
            </summary>
        </member>
        <member name="M:ExplorerCtrl.Controls.AnimationImage.StopAnimation">
            <summary>
            Stops the animation
            </summary>
        </member>
        <member name="T:ExplorerCtrl.Converter.DateTimeToShortStringConverter">
            <summary>
            Convert DateTime? to short string
            </summary>
        </member>
        <member name="M:ExplorerCtrl.Converter.DateTimeToShortStringConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>A converted value. If the method returns null, the valid null value is used.</returns>
        </member>
        <member name="M:ExplorerCtrl.Converter.DateTimeToShortStringConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>A converted value. If the method returns null, the valid null value is used.</returns>
        </member>
        <member name="T:ExplorerCtrl.Converter.ItemToSizeStringConverter">
            <summary>
            Convert IExplorerItem to size string
            </summary>
        </member>
        <member name="M:ExplorerCtrl.Converter.ItemToSizeStringConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>A converted value. If the method returns null, the valid null value is used.</returns>
        </member>
        <member name="M:ExplorerCtrl.Converter.ItemToSizeStringConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>A converted value. If the method returns null, the valid null value is used.</returns>
        </member>
        <member name="T:ExplorerCtrl.Explorer">
            <summary>
            Explorer control class
            </summary>
        </member>
        <member name="M:ExplorerCtrl.Explorer.OnApplyTemplate">
            <summary>
            Invoked whenever application code or internal processes call System.Windows.FrameworkElement.ApplyTemplate.
            </summary>
        </member>
        <member name="F:ExplorerCtrl.Explorer.ItemsSourceProperty">
            <summary>
            Dependency property for ItemsSource
            </summary>
        </member>
        <member name="P:ExplorerCtrl.Explorer.ItemsSource">
            <summary>
            Get and set the items
            </summary>
        </member>
        <member name="F:ExplorerCtrl.Explorer.SelectedItemProperty">
            <summary>
            Dependency property for SelectedItem
            </summary>
        </member>
        <member name="P:ExplorerCtrl.Explorer.SelectedItem">
            <summary>
            Get and set the selected item.
            </summary>
        </member>
        <member name="F:ExplorerCtrl.Explorer.SelectedValueProperty">
            <summary>
            Dependency property for SelectedValue
            </summary>
        </member>
        <member name="P:ExplorerCtrl.Explorer.SelectedValue">
            <summary>
            Get and set the value of the selected item.
            </summary>
        </member>
        <member name="F:ExplorerCtrl.Explorer.SelectedItemsProperty">
            <summary>
            Dependency property for SelectedItems
            </summary>
        </member>
        <member name="P:ExplorerCtrl.Explorer.SelectedItems">
            <summary>
            Get and set all selected items.
            </summary>
        </member>
        <member name="F:ExplorerCtrl.Explorer.ItemContextMenuProperty">
            <summary>
            Dependency property for ItemContextMenu
            </summary>
        </member>
        <member name="P:ExplorerCtrl.Explorer.ItemContextMenu">
            <summary>
            Set the folder context menu.
            </summary>
        </member>
        <member name="F:ExplorerCtrl.Explorer.ListContextMenuProperty">
            <summary>
            Dependency property for ListContextMenu
            </summary>
        </member>
        <member name="P:ExplorerCtrl.Explorer.ListContextMenu">
            <summary>
            Set the list context menu.
            </summary>
        </member>
        <member name="F:ExplorerCtrl.Explorer.SelectedPathProperty">
            <summary>
            Dependency property for SelectedPath
            </summary>
        </member>
        <member name="P:ExplorerCtrl.Explorer.SelectedPath">
            <summary>
            Get and set the selected path
            </summary>
        </member>
        <member name="F:ExplorerCtrl.Explorer.DirectorySeparatorCharsProperty">
            <summary>
            Dependency property for DirectorySeparatorChars
            </summary>
        </member>
        <member name="P:ExplorerCtrl.Explorer.DirectorySeparatorChars">
            <summary>
            Get and set the directory separator chars. Default is '\' and '/'
            </summary>
        </member>
        <member name="F:ExplorerCtrl.Explorer.IsCaseSensitiveProperty">
            <summary>
            Dependency property for IsCaseSensitive
            </summary>
        </member>
        <member name="P:ExplorerCtrl.Explorer.IsCaseSensitive">
            <summary>
            Get and set if the folder compare is case sensitive or not
            </summary>
        </member>
        <member name="T:ExplorerCtrl.ExplorerItem">
            <summary>
            Explorer Item class
            </summary>
        </member>
        <member name="P:ExplorerCtrl.ExplorerItem.Name">
            <summary>
            Name of the item.
            </summary>
        </member>
        <member name="P:ExplorerCtrl.ExplorerItem.FullName">
            <summary>
            Full name of the item.
            </summary>
        </member>
        <member name="P:ExplorerCtrl.ExplorerItem.Type">
            <summary>
            Type of the item.
            </summary>
        </member>
        <member name="P:ExplorerCtrl.ExplorerItem.Size">
            <summary>
            Size of the item in bytes
            </summary>
        </member>
        <member name="P:ExplorerCtrl.ExplorerItem.IsDirectory">
            <summary>
            True if item is a directory; false if not
            </summary>
        </member>
        <member name="P:ExplorerCtrl.ExplorerItem.Children">
            <summary>
            Get the children of the directory
            </summary>
        </member>
        <member name="P:ExplorerCtrl.ExplorerItem.Folders">
            <summary>
            Get the children folders of the directory
            </summary>
        </member>
        <member name="P:ExplorerCtrl.ExplorerItem.Files">
            <summary>
            Get the children files of the directory
            </summary>
        </member>
        <member name="P:ExplorerCtrl.ExplorerItem.Content">
            <summary>
            Get the content of the item
            </summary>
        </member>
        <member name="P:ExplorerCtrl.ExplorerItem.IsExpanded">
            <summary>
            True if the item is expanded in the tree control; false if not
            </summary>
        </member>
        <member name="P:ExplorerCtrl.ExplorerItem.IsSelectedInTree">
            <summary>
            True if the item is selected in the tree control; false if not
            </summary>
        </member>
        <member name="P:ExplorerCtrl.ExplorerItem.IsSelectedInList">
            <summary>
            True if the item is selected in the list control; false if not
            </summary>
        </member>
        <member name="T:ExplorerCtrl.ExplorerItemType">
            <summary>
            Type of the explorer item.
            </summary>
        </member>
        <member name="F:ExplorerCtrl.ExplorerItemType.Directory">
            <summary>
            The explorer item is a directory.
            </summary>
        </member>
        <member name="F:ExplorerCtrl.ExplorerItemType.Link">
            <summary>
            The explorer item is a link.
            </summary>
        </member>
        <member name="F:ExplorerCtrl.ExplorerItemType.File">
            <summary>
            The explorer item is a file.
            </summary>
        </member>
        <member name="T:ExplorerCtrl.IExplorerItem">
            <summary>
            Interface for the explorer item class.
            </summary>
        </member>
        <member name="E:ExplorerCtrl.IExplorerItem.Refresh">
            <summary>
            Event to signal an refresh.
            </summary>
        </member>
        <member name="P:ExplorerCtrl.IExplorerItem.Name">
            <summary>
            Name of the item.
            </summary>
        </member>
        <member name="P:ExplorerCtrl.IExplorerItem.FullName">
            <summary>
            Name with path of the item.
            </summary>
        </member>
        <member name="P:ExplorerCtrl.IExplorerItem.Link">
            <summary>
            Link destination path of the item.
            </summary>
        </member>
        <member name="P:ExplorerCtrl.IExplorerItem.Size">
            <summary>
            Size of the item in bytes.
            </summary>
        </member>
        <member name="P:ExplorerCtrl.IExplorerItem.Date">
            <summary>
            Last changing date of the item.
            </summary>
        </member>
        <member name="P:ExplorerCtrl.IExplorerItem.Type">
            <summary>
            Type of the item. (Folder, File or Link)
            </summary>
        </member>
        <member name="P:ExplorerCtrl.IExplorerItem.Icon">
            <summary>
            Icon of the folder. Best in size 16 x 16.
            </summary>
        </member>
        <member name="P:ExplorerCtrl.IExplorerItem.IsDirectory">
            <summary>
            True if folder or link.
            </summary>
        </member>
        <member name="P:ExplorerCtrl.IExplorerItem.HasChildren">
            <summary>
            True is directory has child elements.
            </summary>
        </member>
        <member name="P:ExplorerCtrl.IExplorerItem.Children">
            <summary>
            Child elements of a directory
            </summary>
        </member>
        <member name="M:ExplorerCtrl.IExplorerItem.Push(System.IO.Stream,System.String)">
            <summary>
            Push a stream to a file.
            </summary>
            <param name="stream">Stream to push.</param>
            <param name="path">Path of the file.</param>
        </member>
        <member name="M:ExplorerCtrl.IExplorerItem.Pull(System.String,System.IO.Stream)">
            <summary>
            Pull a path to a stream.
            </summary>
            <param name="path">Stream to pull</param>
            <param name="stream">Path of the file.</param>
        </member>
        <member name="M:ExplorerCtrl.IExplorerItem.CreateFolder(System.String)">
            <summary>
            Create a new folder
            </summary>
            <param name="path">Path of the new folder</param>
        </member>
        <member name="T:ExplorerCtrl.Internal.DelegateCommand">
            <summary>
            This class allows delegating the commanding logic to methods passed as parameters,
            and enables a View to bind commands to objects that are not part of the element tree.
            </summary>
        </member>
        <member name="M:ExplorerCtrl.Internal.DelegateCommand.#ctor(System.Action,System.Func{System.Boolean})">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:ExplorerCtrl.Internal.DelegateCommand.CanExecute(System.Object)">
            <summary>
            Method to determine if the command can be executed
            </summary>
        </member>
        <member name="M:ExplorerCtrl.Internal.DelegateCommand.Execute(System.Object)">
            <summary>
            Execution of the command
            </summary>
        </member>
        <member name="E:ExplorerCtrl.Internal.DelegateCommand.CanExecuteChanged">
            <summary>
            ICommand.CanExecuteChanged implementation
            </summary>
        </member>
        <member name="T:ExplorerCtrl.Internal.DelegateCommand`1">
            <summary>
            This class allows delegating the commanding logic to methods passed as parameters,
            and enables a View to bind commands to objects that are not part of the element tree.
            </summary>
            <typeparam name="T">Type of the parameter passed to the delegates</typeparam>
        </member>
        <member name="M:ExplorerCtrl.Internal.DelegateCommand`1.#ctor(System.Action{`0},System.Func{`0,System.Boolean})">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:ExplorerCtrl.Internal.DelegateCommand`1.CanExecute(System.Object)">
            <summary>
            Method to determine if the command can be executed
            </summary>
        </member>
        <member name="M:ExplorerCtrl.Internal.DelegateCommand`1.Execute(System.Object)">
            <summary>
            Execution of the command
            </summary>
        </member>
        <member name="E:ExplorerCtrl.Internal.DelegateCommand`1.CanExecuteChanged">
            <summary>
            ICommand.CanExecuteChanged implementation
            </summary>
        </member>
        <member name="T:ExplorerCtrl.Internal.FileDescriptor">
            <summary>
            Class representing a virtual file for use by drag/drop or the clipboard.
            </summary>
        </member>
        <member name="P:ExplorerCtrl.Internal.FileDescriptor.Name">
            <summary>
            Gets or sets the name of the file.
            </summary>
        </member>
        <member name="P:ExplorerCtrl.Internal.FileDescriptor.Length">
            <summary>
            Gets or sets the (optional) length of the file.
            </summary>
        </member>
        <member name="P:ExplorerCtrl.Internal.FileDescriptor.ChangeTimeUtc">
            <summary>
            Gets or sets the (optional) change time of the file.
            </summary>
        </member>
        <member name="T:ExplorerCtrl.Internal.ProgresshWindow">
            <summary>
            Interaction logic for ProgresshWindow.xaml
            </summary>
        </member>
        <member name="M:ExplorerCtrl.Internal.ProgresshWindow.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:ExplorerCtrl.Internal.VirtualFileDataObject">
            <summary>
            Class implementing drag/drop and clipboard support for virtual files.
            Also offers an alternate interface to the IDataObject interface.
            </summary>
        </member>
        <member name="P:ExplorerCtrl.Internal.VirtualFileDataObject.IsAsynchronous">
            <summary>
            Gets or sets a value indicating whether the data object can be used asynchronously.
            </summary>
        </member>
        <member name="F:ExplorerCtrl.Internal.VirtualFileDataObject.FILECONTENTS">
            <summary>
            Identifier for CFSTR_FILECONTENTS.
            </summary>
        </member>
        <member name="F:ExplorerCtrl.Internal.VirtualFileDataObject.FILEDESCRIPTORW">
            <summary>
            Identifier for CFSTR_FILEDESCRIPTORW.
            </summary>
        </member>
        <member name="F:ExplorerCtrl.Internal.VirtualFileDataObject.PASTESUCCEEDED">
            <summary>
            Identifier for CFSTR_PASTESUCCEEDED.
            </summary>
        </member>
        <member name="F:ExplorerCtrl.Internal.VirtualFileDataObject.PERFORMEDDROPEFFECT">
            <summary>
            Identifier for CFSTR_PERFORMEDDROPEFFECT.
            </summary>
        </member>
        <member name="F:ExplorerCtrl.Internal.VirtualFileDataObject.PREFERREDDROPEFFECT">
            <summary>
            Identifier for CFSTR_PREFERREDDROPEFFECT.
            </summary>
        </member>
        <member name="F:ExplorerCtrl.Internal.VirtualFileDataObject._dataObjects">
            <summary>
            In-order list of registered data objects.
            </summary>
        </member>
        <member name="F:ExplorerCtrl.Internal.VirtualFileDataObject._inOperation">
            <summary>
            Tracks whether an asynchronous operation is ongoing.
            </summary>
        </member>
        <member name="F:ExplorerCtrl.Internal.VirtualFileDataObject._startAction">
            <summary>
            Stores the user-specified start action.
            </summary>
        </member>
        <member name="F:ExplorerCtrl.Internal.VirtualFileDataObject._endAction">
            <summary>
            Stores the user-specified end action.
            </summary>
        </member>
        <member name="M:ExplorerCtrl.Internal.VirtualFileDataObject.#ctor">
            <summary>
            Initializes a new instance of the VirtualFileDataObject class.
            </summary>
        </member>
        <member name="M:ExplorerCtrl.Internal.VirtualFileDataObject.#ctor(System.Action{ExplorerCtrl.Internal.VirtualFileDataObject},System.Action{ExplorerCtrl.Internal.VirtualFileDataObject},System.Action{System.IO.Stream,ExplorerCtrl.Internal.FileDescriptor})">
            <summary>
            Initializes a new instance of the VirtualFileDataObject class.
            </summary>
            <param name="startAction">Optional action to run at the start of the data transfer.</param>
            <param name="endAction">Optional action to run at the end of the data transfer.</param>
            <param name="streamContents"></param>
        </member>
        <member name="M:ExplorerCtrl.Internal.VirtualFileDataObject.System#Runtime#InteropServices#ComTypes#IDataObject#DAdvise(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.ADVF,System.Runtime.InteropServices.ComTypes.IAdviseSink,System.Int32@)">
            <summary>
            Creates a connection between a data object and an advisory sink.
            </summary>
            <param name="pFormatetc">A FORMATETC structure that defines the format, target device, aspect, and medium that will be used for future notifications.</param>
            <param name="advf">One of the ADVF values that specifies a group of flags for controlling the advisory connection.</param>
            <param name="adviseSink">A pointer to the IAdviseSink interface on the advisory sink that will receive the change notification.</param>
            <param name="connection">When this method returns, contains a pointer to a DWORD token that identifies this connection.</param>
            <returns>HRESULT success code.</returns>
        </member>
        <member name="M:ExplorerCtrl.Internal.VirtualFileDataObject.System#Runtime#InteropServices#ComTypes#IDataObject#DUnadvise(System.Int32)">
            <summary>
            Destroys a notification connection that had been previously established.
            </summary>
            <param name="connection">A DWORD token that specifies the connection to remove.</param>
        </member>
        <member name="M:ExplorerCtrl.Internal.VirtualFileDataObject.System#Runtime#InteropServices#ComTypes#IDataObject#EnumDAdvise(System.Runtime.InteropServices.ComTypes.IEnumSTATDATA@)">
            <summary>
            Creates an object that can be used to enumerate the current advisory connections.
            </summary>
            <param name="enumAdvise">When this method returns, contains an IEnumSTATDATA that receives the interface pointer to the new enumerator object.</param>
            <returns>HRESULT success code.</returns>
        </member>
        <member name="M:ExplorerCtrl.Internal.VirtualFileDataObject.System#Runtime#InteropServices#ComTypes#IDataObject#EnumFormatEtc(System.Runtime.InteropServices.ComTypes.DATADIR)">
            <summary>
            Creates an object for enumerating the FORMATETC structures for a data object.
            </summary>
            <param name="direction">One of the DATADIR values that specifies the direction of the data.</param>
            <returns>IEnumFORMATETC interface.</returns>
        </member>
        <member name="M:ExplorerCtrl.Internal.VirtualFileDataObject.System#Runtime#InteropServices#ComTypes#IDataObject#GetCanonicalFormatEtc(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.FORMATETC@)">
            <summary>
            Provides a standard FORMATETC structure that is logically equivalent to a more complex structure.
            </summary>
            <param name="formatIn">A pointer to a FORMATETC structure that defines the format, medium, and target device that the caller would like to use to retrieve data in a subsequent call such as GetData.</param>
            <param name="formatOut">When this method returns, contains a pointer to a FORMATETC structure that contains the most general information possible for a specific rendering, making it canonically equivalent to formatetIn.</param>
            <returns>HRESULT success code.</returns>
        </member>
        <member name="M:ExplorerCtrl.Internal.VirtualFileDataObject.System#Runtime#InteropServices#ComTypes#IDataObject#GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)">
            <summary>
            Obtains data from a source data object.
            </summary>
            <param name="format">A pointer to a FORMATETC structure that defines the format, medium, and target device to use when passing the data.</param>
            <param name="medium">When this method returns, contains a pointer to the STGMEDIUM structure that indicates the storage medium containing the returned data through its tymed member, and the responsibility for releasing the medium through the value of its pUnkForRelease member.</param>
        </member>
        <member name="M:ExplorerCtrl.Internal.VirtualFileDataObject.System#Runtime#InteropServices#ComTypes#IDataObject#GetDataHere(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)">
            <summary>
            Obtains data from a source data object.
            </summary>
            <param name="format">A pointer to a FORMATETC structure that defines the format, medium, and target device to use when passing the data.</param>
            <param name="medium">A STGMEDIUM that defines the storage medium containing the data being transferred.</param>
        </member>
        <member name="M:ExplorerCtrl.Internal.VirtualFileDataObject.System#Runtime#InteropServices#ComTypes#IDataObject#QueryGetData(System.Runtime.InteropServices.ComTypes.FORMATETC@)">
            <summary>
            Determines whether the data object is capable of rendering the data described in the FORMATETC structure.
            </summary>
            <param name="format">A pointer to a FORMATETC structure that defines the format, medium, and target device to use for the query.</param>
            <returns>HRESULT success code.</returns>
        </member>
        <member name="M:ExplorerCtrl.Internal.VirtualFileDataObject.System#Runtime#InteropServices#ComTypes#IDataObject#SetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@,System.Boolean)">
            <summary>
            Transfers data to the object that implements this method.
            </summary>
            <param name="formatIn">A FORMATETC structure that defines the format used by the data object when interpreting the data contained in the storage medium.</param>
            <param name="medium">A STGMEDIUM structure that defines the storage medium in which the data is being passed.</param>
            <param name="release">true to specify that the data object called, which implements SetData, owns the storage medium after the call returns.</param>
        </member>
        <member name="M:ExplorerCtrl.Internal.VirtualFileDataObject.SetData(System.Int16,System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
            Provides data for the specified data format (HGLOBAL).
            </summary>
            <param name="dataFormat">Data format.</param>
            <param name="data">Sequence of data.</param>
        </member>
        <member name="M:ExplorerCtrl.Internal.VirtualFileDataObject.SetData(System.Int16,System.Int32,ExplorerCtrl.Internal.FileDescriptor,System.Action{System.IO.Stream,ExplorerCtrl.Internal.FileDescriptor})">
            <summary>
            Provides data for the specified data format and index (ISTREAM).
            </summary>
            <param name="dataFormat">Data format.</param>
            <param name="index">Index of data.</param>
            <param name="fileDescriptor"></param>
            <param name="streamData">Action generating the data.</param>
            <remarks>
            Uses Stream instead of IEnumerable(T) because Stream is more likely
            to be natural for the expected scenarios.
            </remarks>
        </member>
        <member name="M:ExplorerCtrl.Internal.VirtualFileDataObject.SetData(System.Collections.Generic.IEnumerable{ExplorerCtrl.Internal.FileDescriptor})">
            <summary>
            Provides data for the specified data format (FILEGROUPDESCRIPTOR/FILEDESCRIPTOR)
            </summary>
            <param name="fileDescriptors">Collection of virtual files.</param>
        </member>
        <member name="P:ExplorerCtrl.Internal.VirtualFileDataObject.PasteSucceeded">
            <summary>
            Gets or sets the CFSTR_PASTESUCCEEDED value for the object.
            </summary>
        </member>
        <member name="P:ExplorerCtrl.Internal.VirtualFileDataObject.PerformedDropEffect">
            <summary>
            Gets or sets the CFSTR_PERFORMEDDROPEFFECT value for the object.
            </summary>
        </member>
        <member name="P:ExplorerCtrl.Internal.VirtualFileDataObject.PreferredDropEffect">
            <summary>
            Gets or sets the CFSTR_PREFERREDDROPEFFECT value for the object.
            </summary>
        </member>
        <member name="M:ExplorerCtrl.Internal.VirtualFileDataObject.GetDropEffect(System.Int16)">
            <summary>
            Gets the DragDropEffects value (if any) previously set on the object.
            </summary>
            <param name="format">Clipboard format.</param>
            <returns>DragDropEffects value or null.</returns>
        </member>
        <member name="M:ExplorerCtrl.Internal.VirtualFileDataObject.ExplorerCtrl#Internal#IAsyncOperation#SetAsyncMode(System.Int32)">
            <summary>
            Called by a drop source to specify whether the data object supports asynchronous data extraction.
            </summary>
            <param name="fDoOpAsync">A Boolean value that is set to VARIANT_TRUE to indicate that an asynchronous operation is supported, or VARIANT_FALSE otherwise.</param>
        </member>
        <member name="M:ExplorerCtrl.Internal.VirtualFileDataObject.ExplorerCtrl#Internal#IAsyncOperation#GetAsyncMode(System.Int32@)">
            <summary>
            Called by a drop target to determine whether the data object supports asynchronous data extraction.
            </summary>
            <param name="pfIsOpAsync">A Boolean value that is set to VARIANT_TRUE to indicate that an asynchronous operation is supported, or VARIANT_FALSE otherwise.</param>
        </member>
        <member name="M:ExplorerCtrl.Internal.VirtualFileDataObject.ExplorerCtrl#Internal#IAsyncOperation#StartOperation(System.Runtime.InteropServices.ComTypes.IBindCtx)">
            <summary>
            Called by a drop target to indicate that asynchronous data extraction is starting.
            </summary>
            <param name="pbcReserved">Reserved. Set this value to NULL.</param>
        </member>
        <member name="M:ExplorerCtrl.Internal.VirtualFileDataObject.ExplorerCtrl#Internal#IAsyncOperation#InOperation(System.Int32@)">
            <summary>
            Called by the drop source to determine whether the target is extracting data asynchronously.
            </summary>
            <param name="pfInAsyncOp">Set to VARIANT_TRUE if data extraction is being handled asynchronously, or VARIANT_FALSE otherwise.</param>
        </member>
        <member name="M:ExplorerCtrl.Internal.VirtualFileDataObject.ExplorerCtrl#Internal#IAsyncOperation#EndOperation(System.Int32,System.Runtime.InteropServices.ComTypes.IBindCtx,System.UInt32)">
            <summary>
            Notifies the data object that that asynchronous data extraction has ended.
            </summary>
            <param name="hResult">An HRESULT value that indicates the outcome of the data extraction. Set to S_OK if successful, or a COM error code otherwise.</param>
            <param name="pbcReserved">Reserved. Set to NULL.</param>
            <param name="dwEffects">A DROPEFFECT value that indicates the result of an optimized move. This should be the same value that would be passed to the data object as a CFSTR_PERFORMEDDROPEFFECT format with a normal data extraction operation.</param>
        </member>
        <member name="M:ExplorerCtrl.Internal.VirtualFileDataObject.StructureBytes(System.Object)">
            <summary>
            Returns the in-memory representation of an interop structure.
            </summary>
            <param name="source">Structure to return.</param>
            <returns>In-memory representation of structure.</returns>
        </member>
        <member name="T:ExplorerCtrl.Internal.VirtualFileDataObject.DataObject">
            <summary>
            Class representing the result of a SetData call.
            </summary>
        </member>
        <member name="P:ExplorerCtrl.Internal.VirtualFileDataObject.DataObject.FORMATETC">
            <summary>
            FORMATETC structure for the data.
            </summary>
        </member>
        <member name="P:ExplorerCtrl.Internal.VirtualFileDataObject.DataObject.GetData">
            <summary>
            Func returning the data as an IntPtr and an HRESULT success code.
            </summary>
        </member>
        <member name="T:ExplorerCtrl.Internal.VirtualFileDataObject.Tuple`2">
            <summary>
            Represents a 2-tuple, or pair.
            </summary>
            <remarks>
            Minimal implementation of the .NET 4 Tuple class; remove if running on .NET 4.
            </remarks>
            <typeparam name="T1">The type of the tuple's first component.</typeparam>
            <typeparam name="T2">The type of the tuple's second component.</typeparam>
        </member>
        <member name="P:ExplorerCtrl.Internal.VirtualFileDataObject.Tuple`2.Item1">
            <summary>
            Gets the value of the current Tuple(T1, T2) object's first component.
            </summary>
        </member>
        <member name="P:ExplorerCtrl.Internal.VirtualFileDataObject.Tuple`2.Item2">
            <summary>
            Gets the value of the current Tuple(T1, T2) object's second component.
            </summary>
        </member>
        <member name="M:ExplorerCtrl.Internal.VirtualFileDataObject.Tuple`2.#ctor(`0,`1)">
            <summary>
            Initializes a new instance of the Tuple(T1, T2) class.
            </summary>
            <param name="item1">The value of the tuple's first component.</param>
            <param name="item2">The value of the tuple's second component.</param>
        </member>
        <member name="T:ExplorerCtrl.Internal.VirtualFileDataObject.IStreamWrapper">
            <summary>
            Simple class that exposes a write-only IStream as a Stream.
            </summary>
        </member>
        <member name="F:ExplorerCtrl.Internal.VirtualFileDataObject.IStreamWrapper._iStream">
            <summary>
            IStream instance being wrapped.
            </summary>
        </member>
        <member name="M:ExplorerCtrl.Internal.VirtualFileDataObject.IStreamWrapper.#ctor(System.Runtime.InteropServices.ComTypes.IStream)">
            <summary>
            Initializes a new instance of the IStreamWrapper class.
            </summary>
            <param name="iStream">IStream instance to wrap.</param>
        </member>
        <member name="P:ExplorerCtrl.Internal.VirtualFileDataObject.IStreamWrapper.CanRead">
            <summary>
            Gets a value indicating whether the current stream supports reading.
            </summary>
        </member>
        <member name="P:ExplorerCtrl.Internal.VirtualFileDataObject.IStreamWrapper.CanSeek">
            <summary>
            Gets a value indicating whether the current stream supports seeking.
            </summary>
        </member>
        <member name="P:ExplorerCtrl.Internal.VirtualFileDataObject.IStreamWrapper.CanWrite">
            <summary>
            Gets a value indicating whether the current stream supports writing.
            </summary>
        </member>
        <member name="M:ExplorerCtrl.Internal.VirtualFileDataObject.IStreamWrapper.Flush">
            <summary>
            Clears all buffers for this stream and causes any buffered data to be written to the underlying device.
            </summary>
        </member>
        <member name="P:ExplorerCtrl.Internal.VirtualFileDataObject.IStreamWrapper.Length">
            <summary>
            Gets the length in bytes of the stream.
            </summary>
        </member>
        <member name="P:ExplorerCtrl.Internal.VirtualFileDataObject.IStreamWrapper.Position">
            <summary>
            Gets or sets the position within the current stream.
            </summary>
        </member>
        <member name="M:ExplorerCtrl.Internal.VirtualFileDataObject.IStreamWrapper.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.
            </summary>
            <param name="buffer">An array of bytes. When this method returns, the buffer contains the specified byte array with the values between offset and (offset + count - 1) replaced by the bytes read from the current source.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin storing the data read from the current stream.</param>
            <param name="count">The maximum number of bytes to be read from the current stream.</param>
            <returns>The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.</returns>
        </member>
        <member name="M:ExplorerCtrl.Internal.VirtualFileDataObject.IStreamWrapper.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the position within the current stream.
            </summary>
            <param name="offset">A byte offset relative to the origin parameter.</param>
            <param name="origin">A value of type SeekOrigin indicating the reference point used to obtain the new position.</param>
            <returns>The new position within the current stream.</returns>
        </member>
        <member name="M:ExplorerCtrl.Internal.VirtualFileDataObject.IStreamWrapper.SetLength(System.Int64)">
            <summary>
            Sets the length of the current stream.
            </summary>
            <param name="value">The desired length of the current stream in bytes.</param>
        </member>
        <member name="M:ExplorerCtrl.Internal.VirtualFileDataObject.IStreamWrapper.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.
            </summary>
            <param name="buffer">An array of bytes. This method copies count bytes from buffer to the current stream.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin copying bytes to the current stream.</param>
            <param name="count">The number of bytes to be written to the current stream.</param>
        </member>
        <member name="M:ExplorerCtrl.Internal.VirtualFileDataObject.DoDragDrop(System.Windows.DependencyObject,System.Runtime.InteropServices.ComTypes.IDataObject,System.Windows.DragDropEffects)">
            <summary>
            Initiates a drag-and-drop operation.
            </summary>
            <param name="dragSource">A reference to the dependency object that is the source of the data being dragged.</param>
            <param name="dataObject">A data object that contains the data being dragged.</param>
            <param name="allowedEffects">One of the DragDropEffects values that specifies permitted effects of the drag-and-drop operation.</param>
            <returns>One of the DragDropEffects values that specifies the final effect that was performed during the drag-and-drop operation.</returns>
            <remarks>
            Call this method instead of System.Windows.DragDrop.DoDragDrop because this method handles IDataObject better.
            </remarks>
        </member>
        <member name="T:ExplorerCtrl.Internal.VirtualFileDataObject.DropSource">
            <summary>
            Contains the methods for generating visual feedback to the end user and for canceling or completing the drag-and-drop operation.
            </summary>
        </member>
        <member name="M:ExplorerCtrl.Internal.VirtualFileDataObject.DropSource.QueryContinueDrag(System.Int32,System.UInt32)">
            <summary>
            Determines whether a drag-and-drop operation should continue.
            </summary>
            <param name="fEscapePressed">Indicates whether the Esc key has been pressed since the previous call to QueryContinueDrag or to DoDragDrop if this is the first call to QueryContinueDrag. A TRUE value indicates the end user has pressed the escape key; a FALSE value indicates it has not been pressed.</param>
            <param name="grfKeyState">The current state of the keyboard modifier keys on the keyboard. Possible values can be a combination of any of the flags MK_CONTROL, MK_SHIFT, MK_ALT, MK_BUTTON, MK_LBUTTON, MK_MBUTTON, and MK_RBUTTON.</param>
            <returns>This method returns S_OK/DRAGDROP_S_DROP/DRAGDROP_S_CANCEL on success.</returns>
        </member>
        <member name="M:ExplorerCtrl.Internal.VirtualFileDataObject.DropSource.GiveFeedback(System.UInt32)">
            <summary>
            Gives visual feedback to an end user during a drag-and-drop operation.
            </summary>
            <param name="dwEffect">The DROPEFFECT value returned by the most recent call to IDropTarget::DragEnter, IDropTarget::DragOver, or IDropTarget::DragLeave. </param>
            <returns>This method returns S_OK on success.</returns>
        </member>
        <member name="T:ExplorerCtrl.Internal.VirtualFileDataObject.NativeMethods">
            <summary>
            Provides access to Win32-level constants, structures, and functions.
            </summary>
        </member>
        <member name="M:ExplorerCtrl.Internal.VirtualFileDataObject.NativeMethods.SUCCEEDED(System.Int32)">
            <summary>
            Returns true iff the HRESULT is a success code.
            </summary>
            <param name="hr">HRESULT to check.</param>
            <returns>True iff a success code.</returns>
        </member>
        <member name="T:ExplorerCtrl.Internal.IAsyncOperation">
            <summary>
            Definition of the IAsyncOperation COM interface.
            </summary>
            <remarks>
            Pseudo-public because VirtualFileDataObject implements it.
            </remarks>
        </member>
        <member name="T:ExplorerCtrl.RefreshEventArgs">
            <summary>
            Represents the event data for the Refresh event.
            </summary>
        </member>
        <member name="M:ExplorerCtrl.RefreshEventArgs.#ctor(System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="recursive">Set the recursive property.</param>
        </member>
        <member name="P:ExplorerCtrl.RefreshEventArgs.Recursive">
            <summary>
            Should the refresh be recursive or not.
            </summary>
        </member>
    </members>
</doc>
